#!/bin/bash

set -e -x

# Environment Variables
export ARCH=arm64
export TZ=Asia/Jakarta
export SEND_TO_TG=1
export CHAT_ID="-1002122810217"
export TOKEN="7087092882:AAGaHhJgtgDc-RUrgYPJTvaMpaMbyCyvf94"
export TIMESTAMP=$(date +"%m%d")-$(date +"%H%M")
export ZIPI="LIFE-${TIMESTAMP}"
export KBUILD_BUILD_USER="syc"
export KBUILD_BUILD_HOST="more"

# Toolchain
PATH="$HOME/CLANG/bin:PATH"
GCC_64_DIR="$HOME/GCC64"
GCC_32_DIR="$HOME/GCC32"

# Prebuilt Clang Toolchain (AOSP)
CLANG_URL="https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android10-release/clang-r353983c.tar.gz"

# Prebuilt GCC Utilities (AOSP)
GCC64="https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9"
GCC32="https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9"
GCC_BRANCH="master-kernel-build-2021"

# Cloning all the Necessary files
if [ ! -d CLANG ]; then mkdir -p $HOME/CLANG && wget "$CLANG_URL" -O clang.tgz && tar -xzf clang.tgz -C $HOME/CLANG; fi
[ ! -d GCC64 ] && git clone --depth=1 "${GCC64}" -b "${GCC_BRANCH}" $GCC64
[ ! -d GCC32 ] && git clone --depth=1 "${GCC32}" -b "${GCC_BRANCH}" $GCC32

# Function to send messages to Telegram
send_msg_telegram() {
    case "$1" in
        1) 
            curl -s -X POST "https://api.telegram.org/bot$TOKEN/sendMessage" \
                -d chat_id="$CHAT_ID" \
                -d "disable_web_page_preview=true" \
                -d "parse_mode=html" \
                -d text="<b>Kernel Version</b>: <code>$(make kernelversion 2>/dev/null | awk 'NR==2')</code>
<b>Date</b>: <code>$(date)</code>
<b>Zip Name</b>: <code>${ZIPI}</code>
<b>Branch</b>: <code>$(git rev-parse --abbrev-ref HEAD)</code>
<b>Last Commit</b>: <code>$(git log --format="%s" -n 1): $(git log --format="%h" -n 1)</code>" \
                -o /dev/null
            ;;
        2) 
            curl -s -F document=@./out/build.log "https://api.telegram.org/bot$TOKEN/sendDocument" \
                -F chat_id="$CHAT_ID" \
                -F "disable_web_page_preview=true" \
                -F "parse_mode=html" \
                -F caption="Build failed after ${minutes} minutes and ${seconds} seconds." \
                -o /dev/null
            ;;
        3) 
            curl -s -F document=@./out/target/"${ZIPI}".zip "https://api.telegram.org/bot$TOKEN/sendDocument" \
                -F chat_id="$CHAT_ID" \
                -F "disable_web_page_preview=true" \
                -F "parse_mode=html" \
                -F caption="Build took ${minutes} minutes and ${seconds} seconds.
<b>SHA512</b>: <code>${checksum}</code>" \
                -o /dev/null

            curl -s -F document=@./out/build.log "https://api.telegram.org/bot$TOKEN/sendDocument" \
                -F chat_id="$CHAT_ID" \
                -F "disable_web_page_preview=true" \
                -F "parse_mode=html" \
                -F caption="Build log" \
                -o /dev/null
            ;;
    esac
}

# Function to compile the kernel
compile_kernel() {
    make O=out ARCH=arm64 RMX2185_defconfig
    START=$(date +"%s")
    make CC=$HOME/CLANG/bin/clang -j4 ARCH=arm64 SUBARCH=arm64 O=out \
        CROSS_COMPILE=$GCC_64_DIR/aarch64-linux-androidkernel- \
        CROSS_COMPILE_ARM32=$GCC_32_DIR/arm-linux-androidkernel- \
        INSTALL_MOD_STRIP=1 V=0 2>&1 | tee out/build.log
    END=$(date +"%s")
    DIFF=$((END - START))
    export minutes=$((DIFF / 60))
    export seconds=$((DIFF % 60))
}

# Function to zip the kernel
zip_kernel() {
    if [ ! -f "./out/arch/${ARCH}/boot/Image.gz-dtb" ]; then
        cp ./out/arch/${ARCH}/boot/Image.gz ./anykernel
    else
        cp ./out/arch/${ARCH}/boot/Image.gz-dtb ./anykernel
    fi

    cd ./anykernel || exit
    zip -r9 "${ZIPI}.zip" * -x .git*
    cd .. || exit

    export checksum=$(sha512sum ./anykernel/"${ZIPI}.zip" | cut -f1 -d ' ')
    
    if [ ! -d "./out/target" ]; then
        mkdir ./out/target
    fi

    if [ ! -f "./out/arch/${ARCH}/boot/Image.gz-dtb" ]; then
        rm -f ./anykernel/Image.gz
    else
        rm -f ./anykernel/Image.gz-dtb
    fi
    
    mv ./anykernel/"${ZIPI}.zip" ./out/target
}

# Main function to build the kernel
build_kernel() {
    clear
    if [ "$SEND_TO_TG" -eq 1 ]; then
        send_msg_telegram 1
    fi

    compile_kernel
    
    if [ ! -f "./out/arch/${ARCH}/boot/Image.gz-dtb" ] && [ ! -f "./out/arch/${ARCH}/boot/Image.gz" ]; then
        if [ "$SEND_TO_TG" -eq 1 ]; then
            send_msg_telegram 2
        fi
        exit 1
    fi

    zip_kernel
    
    if [ "$SEND_TO_TG" -eq 1 ]; then        send_msg_telegram 3
    fi
}

# Start the build process
build_kernel